<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shell脚本基础]]></title>
    <url>%2Fshell%E8%84%9A%E6%9C%AC%2Fshell%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[bash特性及bash脚本编程初步bash的特性命令行展开：~,{} 命令别名：alias，unalias 命令历史：history 文件名通配：glob 快捷键：Ctrl+a，e，u，k，l 命令补全：$PATH 路径补全bash特性之：命令hash 缓存此前命令的查找结果：key-value（key：搜索键，value：值） 1234hash命令 hash：列出 hash -d COMMAND：删除 hash -r ：请客 bash的特性之：变量 程序：指令+数据 指令：由程序文件提供 数据：IO设备、文件、管道、变量程序：算法+数据结构变量名+指向的内存空间，变量赋值 name=value，name指向存储value的内存空间变量类型：存储格式、表示数据范围、参与的运算编程语言： 强类型变量 弱类型变量： bash把所有变量统统视作字符类型 bash中的变量无需事先声明，相当于把声明和赋值过程同时实现 声明：类型，变量名变量替换：把变量名出现的位置替换位其所指向的内存空间中的数据变量引用：${var_name},$var_name变量名：变量名只能包含数字、字母和下划线、而且不能以数字开头，见名知义，命名机制遵循某种法则 bash变量类型：本地变量：作用域范围仅为当前shell进程 环境变量：作用域为当前shell进程及其子进程 局部变量：作用域仅为某代码片段（函数上下文） 位置参数变量：当执行脚本的shell进程传递的参数 特殊变量：shell内置的有特殊功用的变量 $?： 0，成功；1-255，失败本地变量： 变量赋值：name-value 变量引用：${name}，$name “”：变量名会替换为其值 ‘’：变量名不会替换为其值 查看变量：set 撤销变量：unset name 环境变量变量赋值 exprot name=value name=value export name declare -x name=vlaue name=value declare -x name 变量引用：${name}，$name注：bash内嵌了许多环境变量（通常为全大写字符），用于定义bash的工作环境PAHT,HISTFILE,HISTSIZE,HISTCONTROL,SHELL,HOME,UID,PWD,OLDPWD查看环境变量：export，declare -x ，printenv，env撤销环境变量：unset name只读变量： declare -r name readonly name 注：只读变量无法重新赋值，并且不支持撤销，存活时间为当前shell进程的生命周期，随shell进程终止而终止 bash特性之多命令执行COMMAND1;COMMAND2;COMMAND3;….逻辑运算： 运算数： 真（true，yes，on，1） 假（false，no，off，0） 与： 1 &amp;&amp; 1 = 1 1 &amp;&amp; 0 = 0 0 &amp;&amp; 1 = 0 0 &amp;&amp; 0 = 0 或 1 || 1 = 1 1 || 0 = 1 0 || 1 = 1 0 || 0 = 0 非 ！1 = 0 ！0 = 1 1COMMAND1 &amp;&amp; COMMAND2 COMMAND1为“假”，则COMMAND2不会再执行否则，COMMAND1为“真”，则COMMAND2必须执行 1COMMAND1 || COMMAND2 COMMAND1为“假”，则COMMAND2必须执行否则，COMMAND1为“真”，则COMMAND2不会再执行示例： id $username || useradd $username shell脚本编程编程语言的分类：根据运行方式 编译运行：源代码-&gt;编译器（编译）-&gt;程序文件 解释运行：源代码-&gt;运行时启动解释器，由解释器边解释边运行根据其编程过程中功能的实现是调用库还是调用外部的程序文件：shell脚本编程：利用系统上的命令及编程组件进行编程完整编程：利用库编程组件进行编程；编程模型：过程式编程语言，面向对象的编程语言 程序=指令+数据 过程式：以指令为中心来组织代码，数据是服务于代码； 顺序执行 选择执行 循环执行 对象式：以数据为中心来组织代码，围绕数据来组织指令； 类（class）：实例化对象，methodshell脚本编程：过程式编程，解释运行，依赖于外部程序文件运行 1234567如何写shell脚本 脚本文件的第一行，顶格：给出shebang，解释器路径，用于指明解释执行当前脚本的解释器程序文件 常见的解释器： #!/bin/bash #!/usr/bin/python #!/usr/bin/perl shell脚本：命令的堆积；但很多命令不具有幂等性，需要用程序逻辑来判断运行条件是否满足，以避免其运行中发生错误；运行脚本： 赋予执行权限，并直接运行此程序文件： chmod +x file 直接运行解释器，将脚本以命令行参数传递给解释器程序 bash file 注：脚本中的空白行会被解释器忽略；脚本中，除了shebang，余下的所有以#开头的行，都会呗视作注释而被忽略；此即为注释行。shell叫的运行是通过运行一个子shell进程实现的 练习1、显示etc下面的所有p和P开头的文件和文件夹2、把var目录下的所有文件和文件加以大写显示出来3、创建临时文件夹/tmp/file.xxxx 123ls -d /etc/[pP]*ls -d /var/* | tr 'a-z' 'A-Z'mktemp /tmp/file.xxx bash的配置文件两类： profile类：为交互式登陆的shell提供配置 bashrc类：非交互式登陆的shell进程提供配置登陆类型： 交互式登陆shell进程： 直接通过某终端输入账号和密码后登录打开的shell进程 使用su命令：su - USERNAME，或者使用 su -l USERNAME执行的登陆切换 非交互式登陆shell进程 su USERNAME执行的登陆切换 图形界面下打开的终端 运行脚本profile类： 全局：对所有用户都生效 /etc/profile /etc/profild.d/ 用户个人:仅对当前用户有效 123**bashrc类**：**全局**：/etc/bashrc**用户个人**：```~/.bashrc 功用1、定义本地变量2、定义命令别名注：仅管理员可以修改全局配置文件 交互式登陆shell进程 12**非交互式登陆shell进程**```~/.bashrc--&gt;/etc/bashrc--&gt;/etc/profile.d* 命令行中定义的特性，例如变量和别名作用域为当前shell进程的生命周期配置文件顶的特性，只对随后新启动的shell进程有效 让通过配置文件定义的特性立即生效： 通过命令行重复定义一次 让shell进程重读配置文件12~]# source /PATH/FROM/CONF_FILE~]# . /PATH/FROM?CONF_FILE]]></content>
      <categories>
        <category>shell脚本</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[模板]]></title>
    <url>%2Funcategorized%2Fhello-world%2F</url>
    <content type="text"><![CDATA[持续更新中。。。 标题一标题二标题三标题四标题五标题六1这是一个bash 外链: Writing 斜体粗体加粗斜体删除线 文字引用 行内代码 ​123多行代码多行代码​ $$数学公式$$ 分割线方法一：— 方法二：+++ 方法三：*** 列表 有序列表项 无序列表项 无序列表项 无序列表项 表格表头1|表头2-|-|-内容11|内容12内容21|内容22 图片]]></content>
  </entry>
  <entry>
    <title><![CDATA[用户、组和权限管理]]></title>
    <url>%2FLinux%E5%9F%BA%E7%A1%80%2F%E7%94%A8%E6%88%B7%E3%80%81%E7%BB%84%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[/etc/passwd：用户的信息库 name:passwd:UID:GID:GECOS:directory:shellname：用户名password：可以是加密的密码，也可是占位符xUID：GID：用户所属的主组的ID号GECOS：注释信息directory：用户的家目录shell：用户的默认shell，登录时默认shell程序 /etc/shadow：用户密码 用户名：加密的密码：最近一次修改密码的时间：最短使用期限：最长使用期限：警告期段：过期期段：保留字段 /etc/group：组的信息库 group_name：password：GID：user_listuesr_list：该组的用户成员，以此组为附加组的用户的用户列表相关命令：useradd,userdel,usermod,passwd,groupadd,groupdel,groupmod,gpasswd,chage,chsh,id,su 添加组删除组命令1234groupadd [选项] group_name -g GID #设置GID，默认是上一个GID+1 -n new_name #修改组名groupdel [选项] GROUP 创建、删除用户useradd命令：添加用户12345678useradd [选项] username -u, --uid UID:指定UID -g, --gid GROUP：指定基本组ID，此组需要事先存在 -G, --groups GROUP1[,GROUP2,...[,GROUPN]]：指明用户所属的附加组，多个组之间用逗号分隔 -c, --comment COMMENT：指明注释信息 -d, --home HOME_DIR：指定的路径为用户的家目录，通过复制/etc/skel此目录并重命名实现，指定的家目录路径如果事先存在，则不会为用户复制环境配置文件 -s, --shell SHELL：指定用户的默认shell，可用的所有shell列表存储在/etc/shells文件中 -r, --system 创建系统用户 注：创建用户时的诸多默认设定配置文件为/etc/login.defs 123useradd -D：显示创建用户的默认配置useradd -D 选项 ：修改默认选项的值： # 修改的结果保存于/etc/default/useradd文件中； usermod命令：修改用户属性1234567891011usermod [选项] 登录 -u, --uid UID：修改用户的ID为此处指定的新UID -g, --gid GROUP：修改用户所属的基本组 -G, --groups GROUP1[,GROUP2,...[,GROUPN]]：修改用户所属的附加组，原来的附加组会被覆盖 -a, --append：与-G一同使用，用于为用户追加新的附加组 -c, --comment COMMENT：修改注释信息 -d, --home HOME_DIR：修改用户的家目录，用户文件不会移动到新目录 -m, --move-home：只能与-d一同使用，将原来家目录移动为新的家目录 -s, --shell：修改用户默认shell -L, --lock：锁定用户密码 -U, --unlock：解锁用户密码 userdel命令：删除用户12userdel [选项] 登录 -r： 删除用户时一并删除其家目录 passwd命令 passwd：修改用户自己的密码 passwd UESRNAME：修改指定用户的密码，但仅有root有此权限 12345678-l,-u #锁定和解锁用户-d #清除用户密码串-e DATE #过期期限，日期-i DAYS #非活动期限-n DAYS #密码的最短使用期限-x DAYS #密码的最长使用期限-w DAYS #警告期限--stdin # echo "PASSWORD" | passwd -stdin USERNAME gpasswd命令组密码文件：/etc/gshedow gpasswd [选项] group -a USERNAME：向组中添加用户 -d USERNAME：从组中移除用户 newgrp命令：临时切换指定的组为基本组newgrp [-] [group] -：会模拟用户重新登录以实现重新初始化其工作环境： chage命令：更改用户名密码过期信息chage [选项] 登录名 -d -E -W -m -M id命令：显示用户的真实有效ID12345id [option]...[user] -u #仅显示有效的UID -g #仅显示用户的基本组ID -G #仅显示用户所属的所有组的ID -n #显示名字而非ID su命令：switch user登录式切换：会通过读取目标用户的配置文件来重新初始化 su - USERNAME su -l USERNAME非登录式切换：不会读取目标用户的配置文件进行初始化 su USERNAME注意：管理员可无密码切换至其他任何用户 -c ‘COMMAND’ :仅以指定用户的身份运行此处指定的命令 其他命令：chsh，chfn，finger，whoami 命令总结：groupadd，groupmod，groupdel，useradd，usermod，userdel，passwd，gpasswd，newgrp，id，su 权限管理权限 r：readable，读 w：writable，写 x：excutable，执行 文件 * r：可获取文件数据 * w：可修改文件的数据 * x：可将此文件运行为进行 目录 * r：可使用ls命令获取其下的所有文件列表 * w：可修改此目录下的文件列表，即创建或删除文件 * x：可cd至此目录中，且可使用ls -l来获取所有文件的详细属性信息权限组合机制 — 000 0 –x 001 1 -w- 010 2 -wx 011 3 r– 100 4 r-x 101 5 rw- 110 6 rwx 111 7 权限管理命令chmod命令 chmod [OPTION]… MODE[,MODE]…FILE…三类用户：u（属主）g（属组）o（其他）a（所有） MODE表示法：赋权表示法：直接操作一类用户的所有权限位 u= g= o= a= 授权表示法：直接操作一类用户的一个权限位r，w，x u+，u- g+，g- o+，o- a+，a- chmod [OPTION] … OCTAL-MODE FILE… 八进制表示法 chmod [OPTION] … –reference=RFILE FILE…选项： -R，–recursive：递归修改 从属关系管理命令：chown，chgrp1.chown命令： chown [OPTION] … [OWNER][:[GROUP]] FILE … chown [OPTION] … –reference=RFILE FILE … 选项： -R：递归修改注：用户对目录有写权限，对目录下的文件没有写权限，则不能修改该文件，可以删除该文件只有ROOT可以修改文件的属组属主 umask：文件的权限反向掩码，遮罩码文件： 666-umask 目录： 777-umask注：之所以文件用666去减，表示文件默认不能拥有执行权限，如果减得的结果中有执行权限，则需要将其加1umask命令 umask：查看当前umask umask MASK ：设置umask注：此类设定仅对当前shell进程有效 install命令install - copy files and set attributes 单源复制 install [OPTION] ... [-T] SOURCE DEST 多源复制 install [OPTION] ... SOURCE ... DIRECTORY install [OPTION] ... -t DIRECTORY SOURCE ... 创建目录： install [OPTION] ... -d DIRECTORY 常用选项： -m，--mode=MODE：设定目标文件权限，默认为755： -o，--owner=OWMER：设定目标文件属主 -g，--group=GROUP：设定目标文件属组mktemp命令mktemp - create a temporary file or directory mktemp [OPTION] ... [TEMPLATE] 常用选项： -d：创建临时目录注意：mktemp将会创建的临时文件名直接返回，因此，可直接通过命令引用保存起来]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[bash的基础特性]]></title>
    <url>%2FLinux%E5%9F%BA%E7%A1%80%2Fbash%E7%9A%84%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[bash的基础特性命令历史shell进程会在其会话中保存此前用户提交执行过的命令history定制history的功能，可通过环境变量实现： HISTSIZE：shell进程可保留的命令历史的条数 HISTFILE：持久保存命令历史的文件，家目录下的.bash_history文件 HISTFILESIZE：定义文件最多保存多少条命令 12345history -c #清空命令历史history -d offset #删除指定历史命令history -w #使用命令将内存命令，写入文件中history -r #把历史命令从内存文件中读到内存中history # #显示最近的#条命令 调用命令历史列表中的命令 !#：再一次执行历史列表的第#条命令 !!：再一次执行上一条命令 !STRING：再一次执行命令历史列表中最近一个以STRING开头的命令 注意：命令的重复执行有时候需要依赖于幂等性 调用上一条命令的最后一个参数： 快捷键：ESC 字符串：!$ 控制命令历史记录的方式：环境变量HISTCONTROL ignoredups：忽略重复的命令 ignorespace：忽略以空白字符开头的命令 ignoreboth：以上两者同时生效修改变量的值： NAME=’VALUE’ 命令补全功能shell程序在接收到用户执行命令的请求，分析完成之后，最左侧的字符串会被当做命令命令处理机制查找内部命令：根据PATH环境变量中设定的目录，自左而右逐个搜索目录下的文件名 目录管理类的命令mkdir创建目录 1234mkdir [options]...DIRECTORY...-p #自动按需创建父目录-v #verbose，显示详细过程-m #MODE：直接给定权限 命令行展开~：自动展开为用户的家目录，或指定的用户的家目录{}：可承载一个以逗号分隔的路径列表，并能够将其展开为多个路径例如：/tmp/{a,b}相当于、/tmp/a /tmp/b tree命令tree [option] directory -L level:指定要显示的层级 命令的执行状态结果 命令的执行状态结果，bash通过状态返回值来输出此结果： 成功：0 失败：1-255命令执行完成之后其状态返回值保存于bash的特殊变量$?中 注：命令正常执行时，有的返回有明朗返回值：根据命令及其功能不同，结果各不相同 引用命令的执行结果 12$(COMMAND) 或 `COMMAND`引用，强引用 '' 弱引用 "" 命令引用 `` 快捷键ctrl+a：跳转至命令行行首ctrl+e：跳转至命令行行尾ctrl+u：删除行首至光标所在处之间的所有字符ctrl+k：删除光标所在处至行尾的所有字符ctrl+l：清屏，相当于clear 文件查看类命令cat,tac,head,tail,more,lesshead命令 123head [options] FILE-n * #查看前n行-* #同上 tail命令 1234tail [options] FILE-n * #查看后n行-* #同上-f #查看文件尾部内容结束后不退出，跟随显示新增内容 stat命令显示文件或文件系统的状态 文件包含两类数据元数据：metadata，属性，特性数据：data，真实文件数据内容 stat所看到是数据就是元数据 1234567891011stat FILE File: ‘anaconda-ks.cfg’ Size: 1579 Blocks: 8 IO Block: 4096 regular fileDevice: fd00h/64768d Inode: 33583811 Links: 1Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)Context: system_u:object_r:admin_home_t:s0Access: 2019-06-21 00:05:40.458988944 +0800 #最近访问Modify: 2019-06-21 00:05:40.461988944 +0800 #最近更改Change: 2019-06-21 00:05:40.461988944 +0800 #最近改动 Birth: - touch用来改变文件的时间戳 123456touch [options] FILE-a #修改access time-m #修改modify time-c #指定文件不存在时，不创建文件-t STAMP [[CC]YY]MMDDhhmm[.ss] #修改时间为指定时间touch -m -t 1906250000.00 FILE 注：touch不能修改Change time 文件管理工具cp,mv,rmcp命令 12cp -r SOURCE DEST #递归复制目录-d #复制符号链接文件本身，而非其指向的源文件 cp命令12345678910111213-i #交互式复制，即覆盖之前提醒用户确认-f #强制覆盖目标文件-r ，-R #递归复制目录-d #复制符号链接文件本身，而非其指向的源文件-a #-dR --preserve=all，archive，用于实现归档，保留源文件所有属性（备份）--preserv= mode #权限 ownership #属主和属组 timestamps #时间戳 context #安全标签 xattr #扩展属性 links #符号链接 all #上述所有属性 变量命名的内存空间变量类型 字符型 数值型 精确数值 近似数值 存储格式、数据范围、参与运算 变量赋值操作 name=tom globbing文件名通配注：整体文件名匹配，而非部分 匹配模式元字符 *：匹配任意长度的任意字符 pa*,*pa*,*pa,*p*a* ?：匹配任意单个字符 pa?,??pa,p?a,p?a? []：匹配指定范围内的任意单个字符 有几种特殊格式：[a-z],[A-Z],[0-9],[a-z0-9] [[:upper:]]：所有大写字母 [[:lower:]]：所有小写字母 [[:alpha:]]：所有字母 [[:digit:]]：所有数字 [[:alnum:]]：所有字母和数字 [[:space:]]：所有空白字符 [[:punct:]]：所有标点符号 [^]:匹配指定范围外的任意单个字符[^0-9],[^[:upper:]] 注：文件名通配时不区分大小写 IO重定向及管道程序的数据流有三种 输入的数据流：&lt;–标准输入（stdin），键盘 输出的数据流：–&gt;标准输出（stdout），显示器 错误输出流：–&gt;错误输出（stderr），显示器fd：file descriptor，文件描述符 标准输入：0 标准输出：1 错误输出：2IO重定向 覆盖输出重定向：&gt; 追加输出重定向：&gt;&gt; set -C #禁止覆盖输出重定向至已存在的文件，此时可使用强制覆盖输出：&gt;| set +C 关闭上述特性 输入重定向：&lt; tr命令 12345tr [options]...SET1[SET2] #把输入的数据当中的字符，凡是在SET1定义范围内出现的，通通对位转换为SET2出现的字符用法1：tr SET1 SET2 &lt; /PATH/FROM/SOMEFILE用法2：tr -d SET1 &lt; /PATH/FROM/SOMEFILE 管道链接程序，实现将前一个命令的输出直接定向后一个程序当做输入 tee把前一个命令的结果分为两个流，一个保存到文件中，一个送往后一个命令 12COMMAND | tee /PATH/TO/SOMEFILEcat passwd |tee ./clx.yum.log|tr [a-z] [A-Z]]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2FLinux%E5%9F%BA%E7%A1%80%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用命令12345678910111213pwd #显示工作目录cd #change directoryecho $PWD #当前工作目录环境变量echo $OLDPWD #上次的工作目录环境变量ls #列出指定目录下的内容ls -ld 目录 #查看目录自身属性cat -n #文本文件查看,-n表示给文本文件添加行编号tac #同上，但是逆序显示file #查看文件类型echo -e #让转义符生效，例如\n换行shutdown #关机 -h 关机 -r 重启shutdown -c #取消关机wall #向所有人的终端发送消息 ls -l结果 -rw-r–r– 1 root root 85374 Jun 23 19:06 dump.rdb -:文件类型，-，d，b，c，l，s，prw-：文件属主的权限r–：文件属组的权限r–：其他用户（非属主、属组）的权限1：表示硬链接次数root：文件属主root：文件属组85374：表示文件的大小，单位字节Jun 23 19:06：文件最后一次被修改的时间dump.rdb：文件名 文件类型-：常规文件，即fd：directory，目录文件b：block device，块设备文件，支持以“block”为单位进行随机访问c：character device，字符设备文件，支持以“character”为单位进行线性访问 major number：主设备号，用于识别设备类型，进而确定要加载的驱动程序 minor number：次设备号，用于标识同一类型中的不同的设备l：符号链接文件，类似快捷方式p：pipe，命名管道s：socket，套接字文件 echo [OPTION]…[STRING]…STRING可以使用引号，’’、””单引号：强引用，变量引用不执行替换双引号：弱引用，变量引用执行替换 日期相关的命令123456date [OPTION]... [+FORMAT] #显示时间 date +%F 显示日期 +%H 显示小时 +%T 显示准确时间 # Y年 m月 d日 H时 M分 S秒 s从1970.1.1日0点0分0秒到现在经过多少秒date [MMDDhhmm[[CC]YY][.ss]] #设定日期时间date 101008082013.08 #设定日期2013年10月10日8点8分8秒clock，hwclock #显示硬件时钟 -s 把硬件时间设置为系统时间 -w 把系统时间设置为硬件时间cal 2019 #日历指定月份年份 FHS:Filesystem Hierarchy Standard/bin：所有用户可用的基本命令程序文件 /sbin：供系统管理使用的工具程序 /boot：引导加载器必须用到的各静态文件：kernel，initramfs(initrd),grub等 /dev：存储特殊文件或设备文件：设备文件有两种类型：字符设备（线性设备）、块设备（随机设备） /etc：系统程序的配置文件，只能为静态 /home：普通用户的家目录的集中位置，一般每个普通用户的家目录默认为此目录下与用户名同名的子目录，/home/USERNAME /root：管理员的家目录 /lib：为系统启动或根文件系统上的应用程序（/bin,/sbin等）提供共享库，以及为内核提供内核模块 libc.so.*：动态链接C库 ld*：运行时链接器/加载器 modules：用于存储内核模块的目录 /lib64:64位系统特有的存放64位共享库路径 /media：便携式设备挂载点，cdrom，floppy等： /mnt：其它文件系统的临时挂载点 /opt：附加应用程序的安装位置：可选路径： /srv：当前主机为服务提供的数据 /tmp：为那些会产生临时文件的程序提供用于存储临时文件的目录，可供所有用户执行写入操作，有特殊权限 /usr：全局共享的只读数据路径 bin，sbin lib，lib64 /usr/local：让系统管理员安装本地软件 /var：存储经常发生变化的数据目录 /proc：内核及进程存储其相关信息，它们多为内核参数，例如net.ipv4.ip_forward,虚拟为net/ipv4/ip_forward,存储于/proc/sys/，因此其完整路径为/proc/sys/net/ipv4/ip_forward /sys：sysfs虚拟文件系统提供了一种比proc更为理想的访问内核数据的途径：其主要作用在于为管理Linux设备提供一种统一模型的接口基本命令命令类型外部命令内部命令 123type COMMAND #内部：builtin #外部：显示为命令文件路径 注意：命令可以有别名，别名可以与原名相同，此时原名被隐藏，此时如果要运行原命令，则使用\COMMAND 命令别名 123alias #获取所有可用别名的定义alias NAME='COMMAND' #定义别名unalias NAME #撤销别名 注意：仅对当前shell进程有效 which命令12wihick [options] programename --skip-alias:忽略别名 whereis命令123whereis [options] name -b:仅搜索二进制程序路径 -m：仅搜索使用手册文件路径 who命令123who [options] -b：系统此次启动的时间： -r：运行级别 who查看目前谁登陆了]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux基础（2）]]></title>
    <url>%2FLinux%E5%9F%BA%E7%A1%80%2Flinux%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[程序的组成部分：二进制程序文件、库文件、配置文件、帮助文件；二进制、库文件是可执行文件库文件不能单独执行，只能被调用时执行配置文件、帮助文件：可被查看其内容的文件 Linux基础知识命令的语法通用格式COMMAND OPTIONS ARGUMENTS例如 1ls -l /etc 命令本身也是可执行程序文件。多数系统程序文件都存放在：/bin,/sbin,/usr/bin,/usr/local/bin,/usr/local/sbin普通命令：/bin,/usr/bin,/usr/local/bin管理命令：/sbin,/usr/sbin,/usr/local/sbin 命令必须遵循特定格式规范：exe，msi，ELF（linux） 1file /bin/ls 环境变量PATH：查找该路径下是否有用户输入的命令 12echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:usr/lib64/erlang/bin:/usr/lib/rabbitmq/lib/rabbitmq_server-3.4.2/sbin:/root/bin type COMMEND：查看命令类型 获取命令使用帮助内部命令help COMMAND外部命令COMMAND --help使用手册：manualman COMMAND SYNOPSIS命令的options[]:可选内容 &lt;&gt;：必须提供的内容 a|b|c：多选一 ...：同类内容可出现多个 查看命令是否有手册 1whatis COMMAND 更新数据库 1makewhatis 翻屏`空格键：向文件尾翻一屏b：向文件首部翻一屏Ctrl+d：向文件尾部翻半屏Ctrl+u：向文件首部翻半屏回车：向文件尾部翻一行k：向文件首部翻一行G：跳转至最后一行 #G：跳转至指定行1G：跳转至文件首部` 文本搜索/keyword:从文件首部向文件尾部依次查找 ?keyword：从文件尾部向文件首部依次查找 n：下一个 N：上一个]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello Welcome]]></title>
    <url>%2Funcategorized%2F%E4%BD%A0%E5%A5%BD%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[linux基础（1）]]></title>
    <url>%2FLinux%E5%9F%BA%E7%A1%80%2Flinux%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[一、国内CentOS的镜像站点阿里镜像网易镜像搜狐镜像 二、远程连接1、SSH远程连接12345ss -tnl #查看SSH端口是否打开ip addr list #查看IP地址iptables -L -n #确认防火墙状态systemctl disable firewalld.service #关闭防火墙，重启生效systemctl stop firewalld.service #关闭防火墙，重启不生效 三、终端设备串行终端：ttyS伪终端：tty 查看终端设备和接口程序12ttyecho $SHELL 用户类型#：管理员账号$：普通用户 注意：建议使用非管理员账号登录 几个基础命令tty：查看当前的终端设备ip addr list：查看活动接口的IP地址echo：回显 1234basename /PATH/TO/SOMEFILESOMEFILEdirname /PATH/TO/SOMEFILE/PATH/TO linux的哲学思想： 一切皆文件 由众多功能单一的程序组成 尽量避免与用户交互 使用文本文件保存配置信息]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
  </entry>
</search>
